{
	"info": {
		"_postman_id": "59412eea-411f-4658-b967-9b4d15c5fd23",
		"name": "cq",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/circular",
			"item": [
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70d329de-147b-4ce2-bfd8-8a576a0bf80f",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({logger: console});",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"CircularResponse\",",
									"    \"description\": \"A Circular Response.\",",
									"    \"default\": {},",
									"    \"required\": [",
									"        \"id\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"$id\": \"#/properties/id\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Id\",",
									"            \"description\": \"An unique alphanumeric identifier of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"97e668d3-bc73-4a67-8f46-18322df4e75e\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"$id\": \"#/properties/name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Name\",",
									"            \"description\": \"The name of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Post monitor\"",
									"            ]",
									"        },",
									"        \"description\": {",
									"            \"$id\": \"#/properties/description\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Description\",",
									"            \"description\": \"The description of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Post We need to index the 1080p AI protocol!\"",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var data = pm.response.json();",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Post {{$randomNoun}}\",\n    \"description\": \"Post {{$randomPhrase}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/circular/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76cf6843-cf70-4e8d-b2d4-6e428ac1953e",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({logger: console});",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"array\",",
									"    \"title\": \"CircularResponses\",",
									"    \"description\": \"A collection of Circular Responses.\",",
									"    \"default\": [],",
									"    \"uniqueItems\": true,",
									"    \"items\": {",
									"        \"$id\": \"#/items\",",
									"        \"type\": \"object\",",
									"        \"title\": \"CircularResponse\",",
									"        \"description\": \"A CircularResponse.\",",
									"        \"default\": {},",
									"        \"examples\": [",
									"            {",
									"                \"name\": \"Post monitor\",",
									"                \"id\": \"97e668d3-bc73-4a67-8f46-18322df4e75e\",",
									"                \"description\": \"Post We need to index the 1080p AI protocol!\"",
									"            },",
									"            {",
									"                \"id\": \"ec681106-f61a-4c5f-8ceb-decd9225f47f\",",
									"                \"name\": \"Post at\"",
									"            },",
									"            {",
									"                \"id\": \"0cb09b2c-0a01-453c-82b6-c7386b76ee6a\",",
									"                \"description\": \"Post Queue\"",
									"            }",
									"        ],",
									"        \"required\": [",
									"            \"id\"",
									"        ],",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"$id\": \"#/items/properties/id\",",
									"                \"type\": \"string\",",
									"                \"title\": \"Id\",",
									"                \"description\": \"An unique alphanumeric identifier of the Circular.\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                    \"97e668d3-bc73-4a67-8f46-18322df4e75e\"",
									"                ]",
									"            },",
									"            \"name\": {",
									"                \"$id\": \"#/items/properties/name\",",
									"                \"type\": \"string\",",
									"                \"title\": \"Name\",",
									"                \"description\": \"The name of the Circular.\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                    \"Post monitor\"",
									"                ]",
									"            },",
									"            \"description\": {",
									"                \"$id\": \"#/items/properties/description\",",
									"                \"type\": \"string\",",
									"                \"title\": \"Description\",",
									"                \"description\": \"The description of the Circular.\",",
									"                \"default\": \"\",",
									"                \"examples\": [",
									"                    \"Post We need to index the 1080p AI protocol!\"",
									"                ]",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var data = pm.response.json();",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/circular/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/{{id}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "654584a5-bc16-4070-960d-4b2056d03318",
								"exec": [
									"pm.sendRequest(\"http://localhost:8080/circular/\", function (err, response) {",
									"    pm.expect(err).to.be.null",
									"    pm.expect(response).to.not.be.empty",
									"    pm.expect(response.code).to.be.equal(200)",
									"    pm.expect(response.status).to.be.equal(\"OK\")",
									"    let pos = _.random(0, response.json().length-1)",
									"    let id = response.json()[pos].id;",
									"    pm.environment.set(\"circularId\", id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69208fba-777b-48f0-91fd-f1fd145399ae",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    pm.environment.unset(\"circularId\");",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({logger: console});",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"CircularResponse\",",
									"    \"description\": \"A Circular Response.\",",
									"    \"default\": {},",
									"    \"required\": [",
									"        \"id\"",
									"    ],",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"$id\": \"#/properties/id\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Id\",",
									"            \"description\": \"An unique alphanumeric identifier of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"97e668d3-bc73-4a67-8f46-18322df4e75e\"",
									"            ]",
									"        },",
									"        \"name\": {",
									"            \"$id\": \"#/properties/name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Name\",",
									"            \"description\": \"The name of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Post monitor\"",
									"            ]",
									"        },",
									"        \"description\": {",
									"            \"$id\": \"#/properties/description\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Description\",",
									"            \"description\": \"The description of the Circular.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Post We need to index the 1080p AI protocol!\"",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var data = pm.response.json();",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/circular/{{circularId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								"{{circularId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{{$randomUUID}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "654584a5-bc16-4070-960d-4b2056d03318",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69208fba-777b-48f0-91fd-f1fd145399ae",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({logger: console});",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"ApiResponse\",",
									"    \"description\": \"An ApiResponse.\",",
									"    \"default\": {},",
									"    \"required\": [",
									"        \"timestamp\",",
									"        \"status\",",
									"        \"reason\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"timestamp\": {",
									"            \"$id\": \"#/properties/timestamp\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Timestamp\",",
									"            \"description\": \"The timestamp of when the response was given.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"2020-04-26T01:38:46.439264\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"Status\",",
									"            \"description\": \"The HTTP status code of the response.\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"                404.0",
									"            ]",
									"        },",
									"        \"reason\": {",
									"            \"$id\": \"#/properties/reason\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Reason\",",
									"            \"description\": \"The HTTP status reason of the response.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Not Found\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Message\",",
									"            \"description\": \"A descriptive message of the response.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"04d635ef-c3b2-48fd-a5b7-33cdf5045243\"",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var data = pm.response.json();",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/circular/{{$randomUUID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{{id}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54709105-89df-477d-8b0f-b73eda12d6e9",
								"exec": [
									"pm.sendRequest(\"http://localhost:8080/circular/\", function (err, response) {",
									"    pm.expect(err).to.be.null",
									"    pm.expect(response).to.not.be.empty",
									"    pm.expect(response.code).to.be.equal(200)",
									"    pm.expect(response.status).to.be.equal(\"OK\")",
									"    let pos = _.random(0, response.json().length-1)",
									"    let id = response.json()[pos].id;",
									"    pm.environment.set(\"circularId\", id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a25a4c43-497a-4181-8fc8-776bf2cc0a33",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"    pm.environment.unset(\"circularId\");",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.have.body();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/circular/{{circularId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								"{{circularId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/{{$randomUUID}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54709105-89df-477d-8b0f-b73eda12d6e9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a25a4c43-497a-4181-8fc8-776bf2cc0a33",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);",
									"});",
									"",
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({logger: console});",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"ApiResponse\",",
									"    \"description\": \"An ApiResponse.\",",
									"    \"default\": {},",
									"    \"required\": [",
									"        \"timestamp\",",
									"        \"status\",",
									"        \"reason\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"timestamp\": {",
									"            \"$id\": \"#/properties/timestamp\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Timestamp\",",
									"            \"description\": \"The timestamp of when the response was given.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"2020-04-26T01:38:46.439264\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"Status\",",
									"            \"description\": \"The HTTP status code of the response.\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"                404.0",
									"            ]",
									"        },",
									"        \"reason\": {",
									"            \"$id\": \"#/properties/reason\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Reason\",",
									"            \"description\": \"The HTTP status reason of the response.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Not Found\"",
									"            ]",
									"        },",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"Message\",",
									"            \"description\": \"A descriptive message of the response.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"04d635ef-c3b2-48fd-a5b7-33cdf5045243\"",
									"            ]",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"    var data = pm.response.json();",
									"    pm.expect(ajv.validate(schema, data)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/circular/{{$randomUUID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54709105-89df-477d-8b0f-b73eda12d6e9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a25a4c43-497a-4181-8fc8-776bf2cc0a33",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.have.body();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/circular/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"circular",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c6e46880-7e24-4ce1-b766-c6bfd9845811",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "43b75e20-3f07-4a7e-9f80-6bac43c42b89",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}